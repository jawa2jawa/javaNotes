SBI:10422377554
****************************************************************************************************
package blocks;

public class Binding {
	public void add(Integer a, Integer b) {
		System.out.println("Integer");
		System.out.println(a + b);
	}
	public void add(Long a, Integer b) {
		System.out.println("Long");
		System.out.println(a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b=new Binding();
		b.add(2,4);
	}

}
OutPut:-
Integer
6
==========================================================================================================
package blocks;

public class Binding implements TestI {

	public void add(Integer aa, Integer b) {
		System.out.println(aa + b+"Integer");
	}

	public void add(Long a, Integer b) {
		System.out.println("Long" + a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b = new Binding();
		b.add(2, 3);
	}

}
OutPut:-
5Integer

==========================================================================================================
package blocks;

public class Binding {
	public void add(Integer a, Integer b) {
		System.out.println("Integer"+a + b);
	}
	public void add(Long a, Integer b) {
		System.out.println("Long");
		System.out.println(a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b=new Binding();
		b.add(2,4);
	}

}
OutPut:-
Integer24
==========================================================================================================
package blocks;

public class Binding {
	public void add(Integer a, Integer b) {
		System.out.println("Integer"+a + b);
	}
	public void add(Long a, Integer b) {
		System.out.println("Long");
		System.out.println(a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b=new Binding();
		b.add(2L,4);
	}

}
OutPut:-
Long
6
==========================================================================================================
package blocks;

public class Binding {
	public void add(Integer a, Integer b) {
		System.out.println("Integer"+a + b);
	}
	public void add(Long a, Integer b) {
		System.out.println("Long"+a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b=new Binding();
		b.add(2L,4);
	}

}
OutPut:-
Long24
==========================================================================================================
package blocks;

public class Binding {
	public void add(Integer a, Integer b) {
		System.out.println("Integer"+a + b);
	}
	public void add(Long a, Integer b) {
		System.out.println("Long"+a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b=new Binding();
		b.add(2l,null);
	}

}
OutPut:-
Long2null
==========================================================================================================
package blocks;

public class Binding {
	public void add(Integer a, Integer b) {
		System.out.println("Integer"+a + b);
	}
	public void add(Long a, Integer b) {
		System.out.println("Long"+a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b=new Binding();
		b.add(null,3);//Compilation error
	}

}
Output:-
will not Compile
==========================================================================================================
package blocks;

public class Binding implements TestI {
	static final int k;//Compilation error

	public void add(Integer aa, Integer b) {
		System.out.println("Integer" + aa + b);
	}

	public void add(Long a, Integer b) {
		System.out.println("Long" + a + b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Binding b = new Binding();
		b.add(2, 3);
	}

}
}
Output:-
will not Compile
====================================================================================================
class Sub_7 extends Sub_6 {
	void show()  {
		super.show();
		System.out.println("Sub_7 functionality");
		throw new RuntimeException();
		System.out.println("sadasd");//Compilation error
	}

}
Output:-
will not Compile

==========================================================================================================
class Sub_7 extends Sub_6 {
	void show() throws BlockExceptionC   {//It Specifies the Compile time Exception
		//super.show();
		System.out.println("Sub_7 functionality");
		throw new  BlockExceptionR();//can throw runtime exception NO issues
	}

}


class BlockExceptionC extends Exception{
	public BlockExceptionC(){
		super();
	}
}

class BlockExceptionR extends RuntimeException{
	public BlockExceptionR(){
		super();
	}
}
Output:-
will not Compile,at calling line
==========================================================================================================
package blocks;

public class StrEx {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String a1="10";
		String a2="10";
		if(a1==a2){
			System.out.println("True");
		}else{
			System.out.println("False");
		}
	}

}
Output:-
True
==========================================================================================================
package blocks;

public class StrEx {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String a1=new String("10");
		String a2=new String("10");
		if(a1==a2){
			System.out.println("True");
		}else{
			System.out.println("False");
		}
	}

}
Output:-
False
==========================================================================================================

package blocks;

public class StrEx {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String a1=new String("10");
		String a2=new String("10");
		a2=a2.intern();
		if(a1==a2){
			System.out.println("True");
		}else{
			System.out.println("False");
		}
	}

}
OutPut:-
False
==========================================================================================================
package blocks;

public class StrEx {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String a1="10";
		String a3="10";
		String a2="1010";
		a1=a1+a3;
		if(a1==a2){
			System.out.println("True");
		}else{
			System.out.println("False");
		}
	}

}
Output:-
False
==========================================================================================================
package blocks;

public class StrEx {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String a1="10";
		String a3="10";
		String a2="1010";
		a1=a1+a3;
		a1=a1.intern();
		if(a1==a2){
			System.out.println("True");
		}else{
			System.out.println("False");
		}
	}

}
Output:-
True
==========================================================================================================

                                                                        Bullet Points
    
==>The closest overriding implementation will be reused by the sub class
==>clone() needs to be execute in try catch block so CloneNotSupportedException is checked Exception
==>Before Answer the Clone Questio we need to think the Object state based on overriding rules
==>RuntimeExceptions will not cause Compile time Errors so need not handle 
==>While overriding we SHOULD not use throws and/or throws for Exception/checked Exception,Where as in RuntimeException no such condition
==> throw new RuntimeException NOT requires  throws where as throw new CompileException show need throws CompileException
==>{THERE IS NO RELATION BETWEEN THROW AND THROWS FOR RUNTIMEEXCEPTIONS ,BUT in CHECKED EXCEPTIONS RULE IS IF YOUR NOT HANDLING THE EXCEPTON THEN USE THROWS }
==>RUNTIME EXCEPTIONS ARE NOT INHERTANCE SPECIFIC WHERE AS CHECKED EXCEPTIONS ARE
==>AT OVERRIDING WE CAN NOT INCREASE(CAN FILTER Exceptions) THE EXCEPTIONS,BUT WE CAN DECREASE FOR CHECKED EXCEPTIONS THIS CONDITION NOT FOR RUNTIMEEXCEPTIONS
==>intern() will work only on String litarals
==>the equals operator '==' is overloaded in case of String datatype,if the 2 arguments are Just litarals then it works as just int data type it checks the values ,if they are references it compares the reference values not the actual values
==>String:The ossociation mattres if concatination happens first then remaining all will be in concatination,if addition happens BOTH ADITION and COncatination will take place 
==>String:litaral concatination will results Sting Object NOT litaral
==>Thumb rule:if String object are passed to == operator the Should not look at values,only look at references,if they are litarals then look at values
==>intern() on the current object checks the pool if exist the same String object if exit it discard the current one and returns the object from pool



